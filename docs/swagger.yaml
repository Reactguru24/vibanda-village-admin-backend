basePath: /api/v1
definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  handlers.PaginatedResponse:
    properties:
      data: {}
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.CreateEventRequest:
    properties:
      capacity:
        minimum: 1
        type: integer
      category:
        type: string
      date:
        type: string
      description:
        maxLength: 1000
        type: string
      featured:
        type: boolean
      image_url:
        type: string
      location:
        maxLength: 200
        type: string
      organizer:
        type: string
      price:
        type: number
      published:
        type: boolean
      tickets_available:
        type: boolean
      time:
        type: string
      title:
        maxLength: 200
        minLength: 3
        type: string
    required:
    - capacity
    - date
    - description
    - location
    - title
    type: object
  models.CreateOrderRequest:
    properties:
      customer_email:
        type: string
      customer_name:
        maxLength: 100
        minLength: 2
        type: string
      customer_phone:
        type: string
      items:
        items:
          $ref: '#/definitions/models.OrderItemRequest'
        minItems: 1
        type: array
      payment_status:
        allOf:
        - $ref: '#/definitions/models.PaymentStatus'
        enum:
        - pending
        - paid
        - failed
      special_request:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.OrderStatus'
        enum:
        - pending
        - confirmed
        - delivered
        - cancelled
      user_id:
        type: string
    required:
    - customer_name
    - customer_phone
    - items
    type: object
  models.CreateProductRequest:
    properties:
      available:
        type: boolean
      category:
        allOf:
        - $ref: '#/definitions/models.ProductCategory'
        enum:
        - food
        - drink
      description:
        maxLength: 500
        type: string
      image_url:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      new:
        type: boolean
      popular:
        type: boolean
      price:
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
      subcategory:
        $ref: '#/definitions/models.ProductSubcategory'
    required:
    - category
    - name
    - price
    - subcategory
    type: object
  models.CreateReservationRequest:
    properties:
      customer_email:
        type: string
      customer_name:
        maxLength: 100
        minLength: 2
        type: string
      customer_phone:
        type: string
      date:
        type: string
      guests:
        maximum: 20
        minimum: 1
        type: integer
      special_requests:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.ReservationStatus'
        enum:
        - pending
        - confirmed
        - cancelled
      time:
        type: string
      user_id:
        type: string
    required:
    - customer_email
    - customer_name
    - customer_phone
    - date
    - guests
    - time
    type: object
  models.EventResponse:
    properties:
      capacity:
        type: integer
      category:
        type: string
      created_at:
        type: string
      date:
        type: string
      description:
        type: string
      featured:
        type: boolean
      id:
        type: string
      image_url:
        type: string
      location:
        type: string
      organizer:
        type: string
      price:
        type: number
      published:
        type: boolean
      tickets_available:
        type: boolean
      time:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.OrderItem:
    properties:
      id:
        type: string
      name:
        type: string
      order_id:
        type: string
      price:
        minimum: 0
        type: number
      quantity:
        minimum: 1
        type: integer
    required:
    - price
    - quantity
    type: object
  models.OrderItemRequest:
    properties:
      name:
        type: string
      price:
        minimum: 0
        type: number
      quantity:
        minimum: 1
        type: integer
    required:
    - name
    - price
    - quantity
    type: object
  models.OrderResponse:
    properties:
      created_at:
        type: string
      customer_email:
        type: string
      customer_name:
        type: string
      customer_phone:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      order_number:
        type: string
      payment_status:
        $ref: '#/definitions/models.PaymentStatus'
      special_request:
        type: string
      status:
        $ref: '#/definitions/models.OrderStatus'
      total_amount:
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
      user_id:
        type: string
    type: object
  models.OrderStatus:
    enum:
    - pending
    - confirmed
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusConfirmed
    - OrderStatusDelivered
    - OrderStatusCancelled
  models.PaymentStatus:
    enum:
    - pending
    - paid
    - failed
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusPaid
    - PaymentStatusFailed
  models.ProductCategory:
    enum:
    - food
    - drink
    type: string
    x-enum-varnames:
    - CategoryFood
    - CategoryDrink
  models.ProductResponse:
    properties:
      available:
        type: boolean
      category:
        $ref: '#/definitions/models.ProductCategory'
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      new:
        type: boolean
      popular:
        type: boolean
      price:
        type: number
      stock:
        type: integer
      subcategory:
        $ref: '#/definitions/models.ProductSubcategory'
      updated_at:
        type: string
    type: object
  models.ProductSubcategory:
    enum:
    - main
    - starters
    - dessert
    - beer
    - wine
    - juice
    - other
    type: string
    x-enum-varnames:
    - SubcategoryMain
    - SubcategoryStarters
    - SubcategoryDessert
    - SubcategoryBeer
    - SubcategoryWine
    - SubcategoryJuice
    - SubcategoryOther
  models.ProfileActivity:
    properties:
      description:
        type: string
      id:
        type: string
      timestamp:
        type: string
    type: object
  models.ProfilePermissions:
    properties:
      access_permissions:
        items:
          type: string
        type: array
      can_manage_roles:
        type: boolean
      can_manage_system:
        type: boolean
      can_manage_users:
        type: boolean
    type: object
  models.ProfileResponse:
    properties:
      bio:
        type: string
      created_at:
        type: string
      department:
        type: string
      email:
        type: string
      id:
        description: Basic user info
        type: string
      join_date:
        description: Profile-specific data
        type: string
      last_login:
        type: string
      name:
        type: string
      permissions:
        $ref: '#/definitions/models.ProfilePermissions'
      phone:
        type: string
      profile_image:
        type: string
      recent_activities:
        items:
          $ref: '#/definitions/models.ProfileActivity'
        type: array
      role:
        $ref: '#/definitions/models.UserRole'
      role_display:
        type: string
      social_links:
        additionalProperties:
          type: string
        type: object
      status:
        $ref: '#/definitions/models.UserStatus'
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      bio:
        type: string
      department:
        type: string
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        enum:
        - admin
        - manager
        - staff
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - name
    - password
    - role
    - username
    type: object
  models.ReservationResponse:
    properties:
      created_at:
        type: string
      customer_email:
        type: string
      customer_name:
        type: string
      customer_phone:
        type: string
      date:
        type: string
      guests:
        type: integer
      id:
        type: string
      special_requests:
        type: string
      status:
        $ref: '#/definitions/models.ReservationStatus'
      time:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
      user_id:
        type: string
    type: object
  models.ReservationStatus:
    enum:
    - pending
    - confirmed
    - cancelled
    type: string
    x-enum-varnames:
    - ReservationStatusPending
    - ReservationStatusConfirmed
    - ReservationStatusCancelled
  models.UpdateEventRequest:
    properties:
      capacity:
        minimum: 1
        type: integer
      category:
        type: string
      date:
        type: string
      description:
        maxLength: 1000
        type: string
      featured:
        type: boolean
      image_url:
        type: string
      location:
        maxLength: 200
        type: string
      organizer:
        type: string
      price:
        type: number
      published:
        type: boolean
      tickets_available:
        type: boolean
      time:
        type: string
      title:
        maxLength: 200
        minLength: 3
        type: string
    type: object
  models.UpdateOrderRequest:
    properties:
      customer_email:
        type: string
      customer_name:
        maxLength: 100
        minLength: 2
        type: string
      customer_phone:
        type: string
      payment_status:
        allOf:
        - $ref: '#/definitions/models.PaymentStatus'
        enum:
        - pending
        - paid
        - failed
      special_request:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.OrderStatus'
        enum:
        - pending
        - confirmed
        - delivered
        - cancelled
    type: object
  models.UpdateProductRequest:
    properties:
      available:
        type: boolean
      category:
        allOf:
        - $ref: '#/definitions/models.ProductCategory'
        enum:
        - food
        - drink
      description:
        maxLength: 500
        type: string
      image_url:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      new:
        type: boolean
      popular:
        type: boolean
      price:
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
      subcategory:
        $ref: '#/definitions/models.ProductSubcategory'
    type: object
  models.UpdateReservationRequest:
    properties:
      customer_email:
        type: string
      customer_name:
        maxLength: 100
        minLength: 2
        type: string
      customer_phone:
        type: string
      date:
        type: string
      guests:
        maximum: 20
        minimum: 1
        type: integer
      special_requests:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.ReservationStatus'
        enum:
        - pending
        - confirmed
        - cancelled
      time:
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      bio:
        type: string
      department:
        type: string
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      phone:
        type: string
      profile_image:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        enum:
        - admin
        - manager
        - staff
      social_links:
        additionalProperties:
          type: string
        type: object
      status:
        allOf:
        - $ref: '#/definitions/models.UserStatus'
        enum:
        - active
        - inactive
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  models.UserResponse:
    properties:
      bio:
        type: string
      created_at:
        type: string
      department:
        type: string
      email:
        type: string
      id:
        type: string
      last_login:
        type: string
      name:
        type: string
      phone:
        type: string
      profile_image:
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      social_links:
        additionalProperties:
          type: string
        type: object
      status:
        $ref: '#/definitions/models.UserStatus'
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserRole:
    enum:
    - admin
    - manager
    - staff
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleManager
    - RoleStaff
  models.UserStatus:
    enum:
    - active
    - inactive
    type: string
    x-enum-varnames:
    - StatusActive
    - StatusInactive
host: localhost:8080
info:
  contact:
    email: support@vibandavillage.com
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive backend API for Vibanda Village restaurant management
    system
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Vibanda Village Admin API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get current user profile information with role-based data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /events:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all events with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event
      parameters:
      - description: Event data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.EventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Retrieve a specific event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an existing event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Event update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update event
      tags:
      - events
  /orders:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all orders with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by payment status
        in: query
        name: payment_status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order
      parameters:
      - description: Order data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Retrieve a specific order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update an existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update order
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all products with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by category
        in: query
        name: category
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Retrieve a specific product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - products
  /reservations:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all reservations with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all reservations
      tags:
      - reservations
    post:
      consumes:
      - application/json
      description: Create a new reservation
      parameters:
      - description: Reservation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateReservationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ReservationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new reservation
      tags:
      - reservations
  /reservations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a reservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete reservation
      tags:
      - reservations
    get:
      consumes:
      - application/json
      description: Retrieve a specific reservation by ID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReservationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get reservation by ID
      tags:
      - reservations
    put:
      consumes:
      - application/json
      description: Update an existing reservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      - description: Reservation update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateReservationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReservationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update reservation
      tags:
      - reservations
  /uploads/image:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image file for products
      parameters:
      - description: Image file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload product image
      tags:
      - uploads
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by role
        in: query
        name: role
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user account (Admin can create managers and staff,
        Manager can create staff only)
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account (Admin cannot delete other admins or managers)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a specific user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user (Admin can update all, Manager can update
        staff only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
